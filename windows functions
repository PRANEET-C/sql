# get the details of the table along with the max salary
select *,
max(salary) over() as max_salary
from payment

# get the details of the table along with the max salary for each department
select *,
max(salary) over(partition by dept) as max_salary
from payment

--row number, rank, dense rank, lead and lag
# Row Number column on the table 
select *,
row_number() over() as rn
from payment

# Row Number column on the table based on department. This will add a column with row number fpr each department. If Admin has 3 columns. Then 1,2,3 will be given as row number.
select *,
row_number() over(partition by dept) as rn
from payment

# Fetch the first 2 employees from each department
select * from(
row_number() over(partition by dept order by emp_id) as rn
from employee) x
where x.rn <3

#fetch the details of the employee earning max salary in each department
select * from (select *,rank() over(paritiion by dept_name order by salary desc) as sal_rnk from employee) x
where x.sal_rnk<=3

# Difference between rank() and dense_rank()
for every dulplicate value rank() skips a number while dense_rank() dosent

--fetch the top 3 employees earning max salary in each dept
select * from (select *, rank() over(partition by dept_name order by salary desc) as sal_rank from employee) x
where x.sal_rank<=3

select *, rank() over(partition by dept_name order by salary desc) as sal_rank,
dense_rank() over(partition by dept_name order by salary desc) as dense_rank,
from employee


--lead and lag function
--lag() function gives previous records
select *,lag(salary) over(partition by dept_name order by emp_id) as prev
from employee

select *,lag(salary) over(partition by dept_name order by emp_id) as prev
from employee

--below lag(column_name,lag by number,default_name). The 2 will check 2 values prior to to the current value. The 0 is the defult value that wil be displayed instead of null.
select *,lag(salary,2,0) over(partition by dept_name order by emp_id) as prev
from employee

--lag() gives next values
select *,lead(salary) over(partition by dept_name order by emp_id) as next_values
from employee

--fetch the details of the employees salary whther they are equal,greater or less then the previous one.
select *,lag(salary) over(partition by dept_name order by emp_id) as prev_value,
case when employee.salary>lag(salary) over(partition by dept_name order by emp_id) then 'Higher than previous salary'
 when employee.salary<lag(salary) over(partition by dept_name order by emp_id) then 'Lower than previous salary'
 when employee.salary=lag(salary) over(partition by dept_name order by emp_id) then 'Equal to previous salary'
 when lag(salary) over(partition by dept_name order by emp_id) is NULL then 'Not comparable'
end sal_range
from employee
